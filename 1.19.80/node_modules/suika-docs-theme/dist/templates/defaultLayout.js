"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultLayout = exports.renderMainBody = exports.renderScripts = exports.renderLinks = exports.renderMeta = exports.renderKeywords = exports.renderTitle = void 0;
const typedoc_1 = require("typedoc");
const utils_1 = require("./utils");
const renderTitle = (props) => typedoc_1.JSX.createElement("title", null, (0, utils_1.displayName)(props));
exports.renderTitle = renderTitle;
const renderKeywords = (values) => {
    if (Array.isArray(values) && values.length) {
        return typedoc_1.JSX.createElement("meta", { name: "keyword", content: values.join(" ") });
    }
    else {
        return "";
    }
};
exports.renderKeywords = renderKeywords;
const renderMeta = (context, props) => {
    return (typedoc_1.JSX.createElement(typedoc_1.JSX.Fragment, null,
        typedoc_1.JSX.createElement("meta", { charSet: "utf-8" }),
        typedoc_1.JSX.createElement("meta", { "http-equiv": "x-ua-compatible", content: "IE=edge" }),
        typedoc_1.JSX.createElement("meta", { name: "viewport", content: "width=device-width, initial-scale=1" }),
        typedoc_1.JSX.createElement("meta", { name: "description", content: `Documentation for ${props.project.name}` }),
        (0, exports.renderKeywords)(context.options.getValue("keywords"))));
};
exports.renderMeta = renderMeta;
const renderLinks = (context) => {
    return (typedoc_1.JSX.createElement(typedoc_1.JSX.Fragment, null,
        typedoc_1.JSX.createElement("link", { rel: "stylesheet", href: context.relativeURL("assets/style.css", true) }),
        typedoc_1.JSX.createElement("link", { rel: "stylesheet", href: context.relativeURL("assets/highlight.css", true) }),
        typedoc_1.JSX.createElement("link", { rel: "stylesheet", href: context.relativeURL("assets/suika-theme.css") }),
        context.options.getValue("customCss") && (typedoc_1.JSX.createElement("link", { rel: "stylesheet", href: context.relativeURL("assets/custom.css", true) }))));
};
exports.renderLinks = renderLinks;
const renderScripts = (context) => {
    return (typedoc_1.JSX.createElement(typedoc_1.JSX.Fragment, null,
        typedoc_1.JSX.createElement("script", { defer: true, src: context.relativeURL("assets/main.js", true) }),
        typedoc_1.JSX.createElement("script", { async: true, src: context.relativeURL("assets/search.js", true), id: "search-script" }),
        typedoc_1.JSX.createElement("script", null,
            typedoc_1.JSX.createElement(typedoc_1.JSX.Raw, { html: 'document.documentElement.dataset.theme = localStorage.getItem("tsd-theme") || "os"' }))));
};
exports.renderScripts = renderScripts;
const renderMainBody = (context, template, props) => {
    return (typedoc_1.JSX.createElement("div", { class: (0, utils_1.classNames)({
            container: true,
            "container-main": true,
        }) },
        typedoc_1.JSX.createElement("div", { class: "col-content" },
            context.hook("content.begin"),
            context.header(props),
            template(props),
            context.hook("content.end")),
        typedoc_1.JSX.createElement("div", { class: "col-sidebar" },
            typedoc_1.JSX.createElement("div", { class: "page-menu" },
                context.hook("pageSidebar.begin"),
                context.pageSidebar(props),
                context.hook("pageSidebar.end")),
            typedoc_1.JSX.createElement("div", { class: "site-menu" },
                context.hook("sidebar.begin"),
                context.sidebar(props),
                context.hook("sidebar.end")))));
};
exports.renderMainBody = renderMainBody;
const defaultLayout = (context, template, props) => {
    return (typedoc_1.JSX.createElement("html", { class: "default", lang: context.options.getValue("htmlLang") },
        typedoc_1.JSX.createElement("head", null,
            context.hook("head.begin"),
            (0, exports.renderMeta)(context, props),
            (0, exports.renderTitle)(props),
            (0, exports.renderLinks)(context),
            (0, exports.renderScripts)(context),
            context.hook("head.end")),
        typedoc_1.JSX.createElement("body", null,
            context.hook("body.begin"),
            context.toolbar(props),
            (0, exports.renderMainBody)(context, template, props),
            context.footer(),
            context.analytics(),
            context.hook("body.end"),
            typedoc_1.JSX.createElement("div", { class: "overlay" }))));
};
exports.defaultLayout = defaultLayout;
