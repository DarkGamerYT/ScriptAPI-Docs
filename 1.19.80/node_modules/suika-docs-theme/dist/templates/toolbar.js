"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toolbar = exports.renderSearchResults = exports.renderSearchField = exports.renderToolbarTitle = exports.renderToolbarLinks = void 0;
const typedoc_1 = require("typedoc");
const utils_1 = require("./utils");
const renderToolbarLinks = (context, values) => {
    if (Array.isArray(values) && values.length) {
        return (typedoc_1.JSX.createElement("div", { class: "field" },
            typedoc_1.JSX.createElement("div", { id: "tsd-toolbar-links" },
                typedoc_1.JSX.createElement("a", { href: context.relativeURL("./index.html") }, "DOCS"),
                typedoc_1.JSX.createElement("a", { href: context.relativeURL("./modules.html") }, "API"),
                values.map(({ url, label, target = "_self" }) => (typedoc_1.JSX.createElement("a", { href: url, target: target }, label))))));
    }
};
exports.renderToolbarLinks = renderToolbarLinks;
const renderToolbarTitle = (context, props) => {
    return (typedoc_1.JSX.createElement("a", { href: context.options.getValue("titleLink") ||
            context.relativeURL("index.html"), class: "title" }, (0, utils_1.displayName)(props)));
};
exports.renderToolbarTitle = renderToolbarTitle;
const renderSearchField = (context) => {
    return (typedoc_1.JSX.createElement("div", { class: "field" },
        typedoc_1.JSX.createElement("label", { for: "tsd-search-field", class: "tsd-widget tsd-toolbar-icon search no-caption" }, context.icons.search()),
        typedoc_1.JSX.createElement("input", { type: "text", id: "tsd-search-field", "aria-label": "Search" })));
};
exports.renderSearchField = renderSearchField;
const renderSearchResults = () => {
    return (typedoc_1.JSX.createElement("ul", { class: "results" },
        typedoc_1.JSX.createElement("li", { class: "state loading" }, "Preparing search index..."),
        typedoc_1.JSX.createElement("li", { class: "state failure" }, "The search index is not available")));
};
exports.renderSearchResults = renderSearchResults;
const toolbar = (context, props) => (typedoc_1.JSX.createElement("header", { class: "tsd-page-toolbar" },
    typedoc_1.JSX.createElement("div", { class: "tsd-toolbar-contents container" },
        typedoc_1.JSX.createElement("div", { class: "table-cell", id: "tsd-search", "data-base": context.relativeURL("./") },
            (0, exports.renderSearchField)(context),
            (0, exports.renderToolbarLinks)(context, context.options.getValue("toolbarLinks")),
            (0, exports.renderSearchResults)(),
            (0, exports.renderToolbarTitle)(context, props)),
        typedoc_1.JSX.createElement("div", { class: "table-cell", id: "tsd-widgets" },
            typedoc_1.JSX.createElement("a", { href: "src/template/toolbar#", class: "tsd-widget tsd-toolbar-icon menu no-caption", "data-toggle": "menu", "aria-label": "Menu" }, context.icons.menu())))));
exports.toolbar = toolbar;
