"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getComment = exports.getReadme = exports.wordbreak = exports.classNames = exports.getDisplayName = exports.displayName = exports.camelToTitleCase = void 0;
const typedoc_1 = require("typedoc");
const camelToTitleCase = (text) => {
    return (text.substring(0, 1).toUpperCase() +
        text.substring(1).replace(/[a-z][A-Z]/g, (x) => `${x[0]} ${x[1]}`));
};
exports.camelToTitleCase = camelToTitleCase;
const displayName = (props) => {
    return props.model.isProject()
        ? (0, exports.getDisplayName)(props.model)
        : `${(0, exports.getDisplayName)(props.model)} | ${(0, exports.getDisplayName)(props.project)}`;
};
exports.displayName = displayName;
const getDisplayName = (refl) => {
    let version = "";
    if ((refl instanceof typedoc_1.DeclarationReflection ||
        refl instanceof typedoc_1.ProjectReflection) &&
        refl.packageVersion) {
        version = ` - v${refl.packageVersion}`;
    }
    return `${refl.name}${version}`;
};
exports.getDisplayName = getDisplayName;
const classNames = (names, extraCss) => {
    const css = Object.keys(names)
        .filter((key) => names[key])
        .concat(extraCss || "")
        .join(" ")
        .trim()
        .replace(/\s+/g, " ");
    return css.length ? css : undefined;
};
exports.classNames = classNames;
const wordbreak = (str) => {
    const ret = [];
    const re = /[\s\S]*?(?:[^_-][_-](?=[^_-])|[^A-Z](?=[A-Z][^A-Z]))/g;
    let match;
    let i = 0;
    while ((match = re.exec(str))) {
        ret.push(match[0], typedoc_1.JSX.createElement("wbr", null));
        i += match[0].length;
    }
    ret.push(str.slice(i));
    return ret;
};
exports.wordbreak = wordbreak;
function getReadme(model) {
    const readme = model.readme?.[0]?.text
        .split(/(\r?\n)+/)[0]
        .replace(/#+\s*/, "");
    return readme ? typedoc_1.JSX.createElement("div", { class: "menu-item-desc" }, readme) : "";
}
exports.getReadme = getReadme;
const getComment = (model) => {
    const comment = model.comment || model.signatures?.[0].comment;
    const summary = comment?.summary;
    if (!summary || !summary.length)
        return "";
    const content = [];
    for (const line of summary) {
        const lineText = line.text;
        content.push(lineText.trim());
    }
    const textContent = content.join(" ");
    const commentContent = textContent.split(/[\r\n]/)[0] ?? textContent;
    const parsedCommentContent = commentContent
        .replace(/\s,\s/g, ", ")
        .replace(/\s\./g, ".")
        .replace(/(:\s?)?```(tsx?)?$/, "")
        .replace(/^#\s*/, "")
        .replace(/^\[([^\]]+)$/, "$1");
    return parsedCommentContent
        ? typedoc_1.JSX.createElement("div", { class: "menu-item-desc" }, parsedCommentContent)
        : "";
};
exports.getComment = getComment;
